---
import { Department, Message, connectDB } from "../lib/db_connection.js";
import Layout from "../layouts/Layout.astro";

// Function to get all departments with their messages
async function getDepartments() {
    try {
        await connectDB();
        const departments = await Department.find({}).populate('messages');
        return departments;
    } catch (error) {
        console.error("Error fetching departments:", error);
        return [];
    }
}

const departments = await getDepartments();
---

<Layout title="Departments">
    <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
            let editingDepartmentId = null;
            let originalAddress = "";
            let editingMessageId = null;
            let originalMessage = "";

            async function updateDepartment(departmentId, newAddress) {
                try {
                    const response = await fetch(
                        `/api/departments/${departmentId}`,
                        {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ address: newAddress }),
                        },
                    );

                    if (!response.ok) {
                        throw new Error("Failed to update department");
                    }

                    return true;
                } catch (error) {
                    console.error("Error updating department:", error);
                    return false;
                }
            }

            async function updateMessage(messageId, newText) {
                try {
                    const response = await fetch(
                        `/api/messages/${messageId}`,
                        {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ text: newText }),
                        },
                    );

                    if (!response.ok) {
                        throw new Error("Failed to update message");
                    }

                    return true;
                } catch (error) {
                    console.error("Error updating message:", error);
                    return false;
                }
            }

            // Event delegation for department edit buttons
            document.addEventListener("click", async (e) => {
                const editButton = e.target.closest(".edit-button");
                if (!editButton) return;

                const departmentCard = editButton.closest(".department-card");
                if (!departmentCard) return;

                const departmentId = departmentCard.dataset.departmentId;
                const titleElement = departmentCard.querySelector(".department-title");
                const address = titleElement.textContent.trim();

                editingDepartmentId = departmentId;
                originalAddress = address;

                const inputElement = document.createElement("input");
                inputElement.type = "text";
                inputElement.value = address;
                inputElement.className = "w-full px-2 py-1 text-lg font-medium text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";

                const actions = document.createElement("div");
                actions.className = "flex justify-end gap-2 mt-2";
                actions.innerHTML = `
                    <button class="save-btn px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
                        Save
                    </button>
                    <button class="cancel-btn px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                `;

                titleElement.replaceWith(inputElement);
                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);

                // Handle save and cancel for department
                actions.addEventListener("click", async (event) => {
                    if (event.target.classList.contains("save-btn")) {
                        const newAddress = inputElement.value.trim();
                        if (newAddress) {
                            const success = await updateDepartment(departmentId, newAddress);
                            if (success) {
                                titleElement.textContent = newAddress;
                                inputElement.replaceWith(titleElement);
                                actions.remove();
                                editingDepartmentId = null;
                            } else {
                                alert("Failed to update department");
                            }
                        }
                    } else if (event.target.classList.contains("cancel-btn")) {
                        titleElement.textContent = originalAddress;
                        inputElement.replaceWith(titleElement);
                        actions.remove();
                        editingDepartmentId = null;
                    }
                });
            });

            // Event delegation for message edit buttons
            document.addEventListener("click", async (e) => {
                const editMessageButton = e.target.closest(".edit-message-button");
                if (!editMessageButton) return;

                const messageItem = editMessageButton.closest(".message-item");
                if (!messageItem) return;

                const messageId = messageItem.dataset.messageId;
                const messageElement = messageItem.querySelector(".message-text");
                const messageText = messageElement.textContent.trim();

                editingMessageId = messageId;
                originalMessage = messageText;

                const inputElement = document.createElement("input");
                inputElement.type = "text";
                inputElement.value = messageText;
                inputElement.className = "w-full px-2 py-1 text-sm text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";

                const actions = document.createElement("div");
                actions.className = "flex justify-end gap-2 mt-2";
                actions.innerHTML = `
                    <button class="save-message-btn px-2 py-1 bg-indigo-600 text-white text-sm rounded-md hover:bg-indigo-700 transition-colors">
                        Save
                    </button>
                    <button class="cancel-message-btn px-2 py-1 bg-gray-200 text-gray-700 text-sm rounded-md hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                `;

                messageElement.replaceWith(inputElement);
                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);

                // Handle save and cancel for message
                actions.addEventListener("click", async (event) => {
                    if (event.target.classList.contains("save-message-btn")) {
                        const newText = inputElement.value.trim();
                        if (newText) {
                            const success = await updateMessage(messageId, newText);
                            if (success) {
                                messageElement.textContent = newText;
                                inputElement.replaceWith(messageElement);
                                actions.remove();
                                editingMessageId = null;
                            } else {
                                alert("Failed to update message");
                            }
                        }
                    } else if (event.target.classList.contains("cancel-message-btn")) {
                        messageElement.textContent = originalMessage;
                        inputElement.replaceWith(messageElement);
                        actions.remove();
                        editingMessageId = null;
                    }
                });
            });
        });
    </script>

    <div class="min-h-screen bg-slate-50">
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
            <header class="mb-16">
                <h1 class="text-4xl font-light tracking-tight bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent">
                    Departments
                </h1>
                <p class="mt-2 text-slate-500 font-light">
                    View and manage departments and their messages.
                </p>
                <div class="mt-6">
                    <input
                        type="text"
                        id="departmentSearch"
                        placeholder="Search departments..."
                        class="w-full md:w-96 px-4 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    />
                </div>
            </header>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {departments.map((department) => (
                    <div class="department-card group relative block bg-white p-8 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 border border-slate-100"
                        data-department-id={department._id}>
                        <div class="flex items-start justify-between">
                            <div class="flex-grow">
                                <h2 class="department-title text-lg font-medium text-slate-800 group-hover:text-indigo-600 transition-colors">
                                    {department.address}
                                </h2>
                            </div>
                            <button class="edit-button text-slate-400 hover:text-indigo-600 transition-colors ml-4">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                </svg>
                            </button>
                        </div>

                        <div class="mt-6 space-y-4">
                            <div class="flex justify-between items-center">
                                <h3 class="text-sm font-medium text-slate-700">Messages:</h3>
                                <a 
                                    href={`/messages/${department._id}`}
                                    class="text-sm text-indigo-600 hover:text-indigo-800 transition-colors flex items-center gap-1"
                                >
                                    View all
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                </a>
                            </div>
                            {/* {department.messages.map((message) => (
                                <div class="message-item bg-slate-50 p-3 rounded-lg" data-message-id={message._id}>
                                    <div class="flex items-start justify-between">
                                        <p class="message-text text-sm text-slate-600">{message.text}</p>
                                        <button class="edit-message-button text-slate-400 hover:text-indigo-600 transition-colors ml-2">
                                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            ))} */}
                        </div>
                    </div>
                ))}
            </div>
        </main>
    </div>
</Layout>

<style>
    .department-card {
        position: relative;
        isolation: isolate;
    }

    .department-card::before {
        content: "";
        position: absolute;
        inset: 0;
        z-index: -1;
        border-radius: inherit;
        background: linear-gradient(
            to bottom right,
            rgba(79, 70, 229, 0.1),
            transparent
        );
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .department-card:hover::before {
        opacity: 1;
    }
</style>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById('departmentSearch');
        const departmentCards = document.querySelectorAll('.department-card');

        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();

            departmentCards.forEach(card => {
                const title = card.querySelector('.department-title').textContent.toLowerCase();
                const messages = Array.from(card.querySelectorAll('.message-text')).map(el => el.textContent.toLowerCase());
                const matchesSearch = title.includes(searchTerm) || messages.some(msg => msg.includes(searchTerm));
                
                card.style.display = matchesSearch ? 'block' : 'none';
            });
        });
    });
</script>

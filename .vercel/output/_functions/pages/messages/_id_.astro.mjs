/* empty css                                    */
import { c as createComponent, a as createAstro, e as renderTemplate, f as renderComponent, m as maybeRenderHead, b as addAttribute } from '../../chunks/astro/server_D5qCIBr6.mjs';
import 'kleur/colors';
import { c as connectDB, D as Department } from '../../chunks/db_connection_QpJ2SUVb.mjs';
import { $ as $$Layout } from '../../chunks/Layout_CJ8gHx6A.mjs';
/* empty css                                   */
export { renderers } from '../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const $$Astro = createAstro();
async function getStaticPaths() {
  try {
    await connectDB();
    const departments = await Department.find({});
    return departments.map((department) => ({
      params: { id: department._id.toString() }
    }));
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}
const $$id = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$id;
  const { id } = Astro2.params;
  async function getDepartmentWithMessages(departmentId) {
    try {
      await connectDB();
      const department2 = await Department.findById(departmentId).populate("messages");
      return department2;
    } catch (error) {
      console.error("Error fetching department:", error);
      return null;
    }
  }
  const department = await getDepartmentWithMessages(id);
  if (!department) {
    return Astro2.redirect("/");
  }
  return renderTemplate(_b || (_b = __template(["", '  <script>\n    document.addEventListener("DOMContentLoaded", () => {\n        const searchInput = document.getElementById("messageSearch");\n        const messageCards = document.querySelectorAll(".message-card");\n\n        searchInput.addEventListener("input", (e) => {\n            const searchTerm = e.target.value.toLowerCase();\n\n            messageCards.forEach((card) => {\n                const messageText = card\n                    .querySelector(".message-text")\n                    .textContent.toLowerCase();\n                const matchesSearch = messageText.includes(searchTerm);\n\n                card.style.display = matchesSearch ? "block" : "none";\n            });\n        });\n    });\n<\/script>'])), renderComponent($$result, "Layout", $$Layout, { "title": `Messages for ${department.address}`, "data-astro-cid-unecnghq": true }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([' <script>\n        function enableMessageEdit(messageId, currentImage) {\n            const messageCard = document.querySelector(\n                `[data-message-id="${messageId}"]`,\n            );\n            const textElement = messageCard.querySelector(".message-text");\n            const imageContainer =\n                messageCard.querySelector(".image-container");\n            const text = textElement.textContent;\n\n            // Create edit form container\n            const editContainer = document.createElement("div");\n            editContainer.className = "space-y-4";\n\n            // Create textarea\n            const textarea = document.createElement("textarea");\n            textarea.value = text;\n            textarea.className =\n                "w-full p-2 border border-indigo-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500";\n            textarea.style.minHeight = "100px";\n            editContainer.appendChild(textarea);\n\n            // Create image upload section\n            const imageSection = document.createElement("div");\n            imageSection.className = "space-y-2";\n            imageSection.innerHTML = `\n                <div class="flex items-center justify-between">\n                    <label class="block text-sm font-medium text-slate-700">\n                        Image\n                    </label>\n                    ${\n                        currentImage\n                            ? `\n                        <button type="button" class="remove-image-btn text-sm text-red-600 hover:text-red-700">\n                            Remove current image\n                        </button>\n                    `\n                            : ""\n                    }\n                </div>\n                <input\n                    type="file"\n                    accept="image/*"\n                    class="block w-full text-sm text-slate-500\n                        file:mr-4 file:py-2 file:px-4\n                        file:rounded-md file:border-0\n                        file:text-sm file:font-medium\n                        file:bg-indigo-50 file:text-indigo-700\n                        hover:file:bg-indigo-100"\n                />\n                ${\n                    currentImage\n                        ? `\n                    <div class="mt-2">\n                        <img src="${currentImage}" alt="Current image" class="h-20 rounded-md"/>\n                    </div>\n                `\n                        : ""\n                }\n            `;\n            editContainer.appendChild(imageSection);\n\n            // Create action buttons\n            const actions = document.createElement("div");\n            actions.className = "flex justify-end gap-2 mt-3";\n            actions.innerHTML = `\n                <button class="save-btn px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">\n                    Save\n                </button>\n                <button class="cancel-btn px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">\n                    Cancel\n                </button>\n            `;\n            editContainer.appendChild(actions);\n\n            // Replace content with edit form\n            textElement.replaceWith(editContainer);\n\n            // Handle remove image button\n            const removeImageBtn =\n                editContainer.querySelector(".remove-image-btn");\n            if (removeImageBtn) {\n                removeImageBtn.addEventListener("click", () => {\n                    const imgPreview = editContainer.querySelector("img");\n                    if (imgPreview) imgPreview.remove();\n                    removeImageBtn.remove();\n                });\n            }\n\n            // Handle save\n            actions\n                .querySelector(".save-btn")\n                .addEventListener("click", async () => {\n                    const formData = new FormData();\n                    formData.append("text", textarea.value.trim());\n\n                    const fileInput =\n                        editContainer.querySelector(\'input[type="file"]\');\n                    if (fileInput.files[0]) {\n                        formData.append("image", fileInput.files[0]);\n                    }\n\n                    // If remove button was clicked and no new file selected\n                    if (\n                        !fileInput.files[0] &&\n                        removeImageBtn &&\n                        !editContainer.querySelector("img")\n                    ) {\n                        formData.append("removeImage", "true");\n                    }\n\n                    try {\n                        const response = await fetch(\n                            `/api/messages/${messageId}`,\n                            {\n                                method: "PUT",\n                                body: formData, // FormData automatically sets correct Content-Type\n                            },\n                        );\n\n                        if (response.ok) {\n                            const updatedMessage = await response.json();\n\n                            // Update text\n                            textElement.textContent = updatedMessage.text;\n\n                            // Update image\n                            if (imageContainer) {\n                                if (updatedMessage.image) {\n                                    if (imageContainer.querySelector("img")) {\n                                        imageContainer.querySelector(\n                                            "img",\n                                        ).src = updatedMessage.image;\n                                    } else {\n                                        imageContainer.innerHTML = `\n                                        <img \n                                            src="${updatedMessage.image}" \n                                            alt="Message attachment" \n                                            class="w-full h-48 object-cover hover:scale-105 transition-transform duration-300" \n                                        />\n                                    `;\n                                    }\n                                } else {\n                                    imageContainer.innerHTML = "";\n                                }\n                            }\n\n                            editContainer.replaceWith(textElement);\n                        } else {\n                            const error = await response.json();\n                            alert(error.message || "Failed to update message");\n                        }\n                    } catch (error) {\n                        console.error("Error updating message:", error);\n                        alert("Error updating message");\n                    }\n                });\n\n            // Handle cancel\n            actions\n                .querySelector(".cancel-btn")\n                .addEventListener("click", () => {\n                    editContainer.replaceWith(textElement);\n                });\n        }\n    <\/script> ', '<main class="min-h-screen bg-slate-50 py-12 px-4 sm:px-6 lg:px-8" data-astro-cid-unecnghq> <div class="max-w-4xl mx-auto" data-astro-cid-unecnghq> <div class="flex items-center justify-between mb-8" data-astro-cid-unecnghq> <h1 class="text-4xl font-light tracking-tight bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent" data-astro-cid-unecnghq> ', ' </h1> <div class="flex items-center gap-4" data-astro-cid-unecnghq> <a href="/" class="back-button group flex items-center text-slate-600 hover:text-indigo-600 transition-colors duration-200" data-astro-cid-unecnghq> <span class="mr-2 text-lg transition-transform duration-200 group-hover:-translate-x-1" data-astro-cid-unecnghq>\u2190</span> <span class="text-sm font-medium" data-astro-cid-unecnghq>Back to Departments</span> </a> </div> </div> <input type="text" id="messageSearch" placeholder="Search messages..." class="px-4 mb-5 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent w-64" data-astro-cid-unecnghq> <div class="space-y-6" id="messagesContainer" data-astro-cid-unecnghq> ', " ", " </div> </div> </main> "], [' <script>\n        function enableMessageEdit(messageId, currentImage) {\n            const messageCard = document.querySelector(\n                \\`[data-message-id="\\${messageId}"]\\`,\n            );\n            const textElement = messageCard.querySelector(".message-text");\n            const imageContainer =\n                messageCard.querySelector(".image-container");\n            const text = textElement.textContent;\n\n            // Create edit form container\n            const editContainer = document.createElement("div");\n            editContainer.className = "space-y-4";\n\n            // Create textarea\n            const textarea = document.createElement("textarea");\n            textarea.value = text;\n            textarea.className =\n                "w-full p-2 border border-indigo-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500";\n            textarea.style.minHeight = "100px";\n            editContainer.appendChild(textarea);\n\n            // Create image upload section\n            const imageSection = document.createElement("div");\n            imageSection.className = "space-y-2";\n            imageSection.innerHTML = \\`\n                <div class="flex items-center justify-between">\n                    <label class="block text-sm font-medium text-slate-700">\n                        Image\n                    </label>\n                    \\${\n                        currentImage\n                            ? \\`\n                        <button type="button" class="remove-image-btn text-sm text-red-600 hover:text-red-700">\n                            Remove current image\n                        </button>\n                    \\`\n                            : ""\n                    }\n                </div>\n                <input\n                    type="file"\n                    accept="image/*"\n                    class="block w-full text-sm text-slate-500\n                        file:mr-4 file:py-2 file:px-4\n                        file:rounded-md file:border-0\n                        file:text-sm file:font-medium\n                        file:bg-indigo-50 file:text-indigo-700\n                        hover:file:bg-indigo-100"\n                />\n                \\${\n                    currentImage\n                        ? \\`\n                    <div class="mt-2">\n                        <img src="\\${currentImage}" alt="Current image" class="h-20 rounded-md"/>\n                    </div>\n                \\`\n                        : ""\n                }\n            \\`;\n            editContainer.appendChild(imageSection);\n\n            // Create action buttons\n            const actions = document.createElement("div");\n            actions.className = "flex justify-end gap-2 mt-3";\n            actions.innerHTML = \\`\n                <button class="save-btn px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">\n                    Save\n                </button>\n                <button class="cancel-btn px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">\n                    Cancel\n                </button>\n            \\`;\n            editContainer.appendChild(actions);\n\n            // Replace content with edit form\n            textElement.replaceWith(editContainer);\n\n            // Handle remove image button\n            const removeImageBtn =\n                editContainer.querySelector(".remove-image-btn");\n            if (removeImageBtn) {\n                removeImageBtn.addEventListener("click", () => {\n                    const imgPreview = editContainer.querySelector("img");\n                    if (imgPreview) imgPreview.remove();\n                    removeImageBtn.remove();\n                });\n            }\n\n            // Handle save\n            actions\n                .querySelector(".save-btn")\n                .addEventListener("click", async () => {\n                    const formData = new FormData();\n                    formData.append("text", textarea.value.trim());\n\n                    const fileInput =\n                        editContainer.querySelector(\'input[type="file"]\');\n                    if (fileInput.files[0]) {\n                        formData.append("image", fileInput.files[0]);\n                    }\n\n                    // If remove button was clicked and no new file selected\n                    if (\n                        !fileInput.files[0] &&\n                        removeImageBtn &&\n                        !editContainer.querySelector("img")\n                    ) {\n                        formData.append("removeImage", "true");\n                    }\n\n                    try {\n                        const response = await fetch(\n                            \\`/api/messages/\\${messageId}\\`,\n                            {\n                                method: "PUT",\n                                body: formData, // FormData automatically sets correct Content-Type\n                            },\n                        );\n\n                        if (response.ok) {\n                            const updatedMessage = await response.json();\n\n                            // Update text\n                            textElement.textContent = updatedMessage.text;\n\n                            // Update image\n                            if (imageContainer) {\n                                if (updatedMessage.image) {\n                                    if (imageContainer.querySelector("img")) {\n                                        imageContainer.querySelector(\n                                            "img",\n                                        ).src = updatedMessage.image;\n                                    } else {\n                                        imageContainer.innerHTML = \\`\n                                        <img \n                                            src="\\${updatedMessage.image}" \n                                            alt="Message attachment" \n                                            class="w-full h-48 object-cover hover:scale-105 transition-transform duration-300" \n                                        />\n                                    \\`;\n                                    }\n                                } else {\n                                    imageContainer.innerHTML = "";\n                                }\n                            }\n\n                            editContainer.replaceWith(textElement);\n                        } else {\n                            const error = await response.json();\n                            alert(error.message || "Failed to update message");\n                        }\n                    } catch (error) {\n                        console.error("Error updating message:", error);\n                        alert("Error updating message");\n                    }\n                });\n\n            // Handle cancel\n            actions\n                .querySelector(".cancel-btn")\n                .addEventListener("click", () => {\n                    editContainer.replaceWith(textElement);\n                });\n        }\n    <\/script> ', '<main class="min-h-screen bg-slate-50 py-12 px-4 sm:px-6 lg:px-8" data-astro-cid-unecnghq> <div class="max-w-4xl mx-auto" data-astro-cid-unecnghq> <div class="flex items-center justify-between mb-8" data-astro-cid-unecnghq> <h1 class="text-4xl font-light tracking-tight bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent" data-astro-cid-unecnghq> ', ' </h1> <div class="flex items-center gap-4" data-astro-cid-unecnghq> <a href="/" class="back-button group flex items-center text-slate-600 hover:text-indigo-600 transition-colors duration-200" data-astro-cid-unecnghq> <span class="mr-2 text-lg transition-transform duration-200 group-hover:-translate-x-1" data-astro-cid-unecnghq>\u2190</span> <span class="text-sm font-medium" data-astro-cid-unecnghq>Back to Departments</span> </a> </div> </div> <input type="text" id="messageSearch" placeholder="Search messages..." class="px-4 mb-5 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent w-64" data-astro-cid-unecnghq> <div class="space-y-6" id="messagesContainer" data-astro-cid-unecnghq> ', " ", " </div> </div> </main> "])), maybeRenderHead(), department.address, department.messages.map((message) => renderTemplate`<div class="message-card bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 border border-slate-100"${addAttribute(message._id, "data-message-id")} data-astro-cid-unecnghq> <div class="p-6" data-astro-cid-unecnghq> <div class="flex justify-between items-start gap-4" data-astro-cid-unecnghq> <div class="flex-grow" data-astro-cid-unecnghq> <p class="message-text text-slate-800 leading-relaxed" data-astro-cid-unecnghq> ${message.text} </p> </div> <div class="flex items-center gap-4" data-astro-cid-unecnghq> <button${addAttribute(`enableMessageEdit('${message._id}', '${message.image || ""}')`, "onclick")} class="edit-button text-slate-400 hover:text-indigo-600 transition-colors" data-astro-cid-unecnghq> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-astro-cid-unecnghq> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" data-astro-cid-unecnghq></path> </svg> </button> <time class="text-sm font-medium text-slate-400 whitespace-nowrap" data-astro-cid-unecnghq> ${new Date(
    message.date
  ).toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric"
  })} </time> </div> </div> ${message.image && renderTemplate`<div class="mt-4 rounded-lg overflow-hidden image-container" data-astro-cid-unecnghq> <img${addAttribute(message.image, "src")} alt="Message attachment" class="w-40 h-auto object-cover rounded-md hover:scale-105 transition-transform duration-300" data-astro-cid-unecnghq> </div>`} </div> </div>`), department.messages.length === 0 && renderTemplate`<div class="text-center py-16" data-astro-cid-unecnghq> <p class="text-slate-500 text-lg font-light" data-astro-cid-unecnghq>
No messages found for this department.
</p> </div>`) }));
}, "/Users/pedrogonzalezsoro/Documents/gonzalezsoroweb/src/pages/messages/[id].astro", void 0);

const $$file = "/Users/pedrogonzalezsoro/Documents/gonzalezsoroweb/src/pages/messages/[id].astro";
const $$url = "/messages/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$id,
    file: $$file,
    getStaticPaths,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };

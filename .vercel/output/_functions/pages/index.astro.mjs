/* empty css                                 */
import { c as createComponent, e as renderTemplate, f as renderComponent, m as maybeRenderHead, b as addAttribute } from '../chunks/astro/server_D5qCIBr6.mjs';
import 'kleur/colors';
import { c as connectDB, D as Department } from '../chunks/db_connection_QpJ2SUVb.mjs';
import { $ as $$Layout } from '../chunks/Layout_CJ8gHx6A.mjs';
/* empty css                                 */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b;
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  async function getDepartments() {
    try {
      await connectDB();
      const departments2 = await Department.find({}).populate("messages");
      return departments2;
    } catch (error) {
      console.error("Error fetching departments:", error);
      return [];
    }
  }
  const departments = await getDepartments();
  return renderTemplate(_b || (_b = __template(["", `  <script>
    document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById('departmentSearch');
        const departmentCards = document.querySelectorAll('.department-card');

        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();

            departmentCards.forEach(card => {
                const title = card.querySelector('.department-title').textContent.toLowerCase();
                const messages = Array.from(card.querySelectorAll('.message-text')).map(el => el.textContent.toLowerCase());
                const matchesSearch = title.includes(searchTerm) || messages.some(msg => msg.includes(searchTerm));
                
                card.style.display = matchesSearch ? 'block' : 'none';
            });
        });
    });
<\/script>`])), renderComponent($$result, "Layout", $$Layout, { "title": "Departments", "data-astro-cid-j7pv25f6": true }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([' <script>\n        document.addEventListener("DOMContentLoaded", () => {\n            let editingDepartmentId = null;\n            let originalAddress = "";\n            let editingMessageId = null;\n            let originalMessage = "";\n\n            async function updateDepartment(departmentId, newAddress) {\n                try {\n                    const response = await fetch(\n                        `/api/departments/${departmentId}`,\n                        {\n                            method: "PUT",\n                            headers: { "Content-Type": "application/json" },\n                            body: JSON.stringify({ address: newAddress }),\n                        },\n                    );\n\n                    if (!response.ok) {\n                        throw new Error("Failed to update department");\n                    }\n\n                    return true;\n                } catch (error) {\n                    console.error("Error updating department:", error);\n                    return false;\n                }\n            }\n\n            async function updateMessage(messageId, newText) {\n                try {\n                    const response = await fetch(\n                        `/api/messages/${messageId}`,\n                        {\n                            method: "PUT",\n                            headers: { "Content-Type": "application/json" },\n                            body: JSON.stringify({ text: newText }),\n                        },\n                    );\n\n                    if (!response.ok) {\n                        throw new Error("Failed to update message");\n                    }\n\n                    return true;\n                } catch (error) {\n                    console.error("Error updating message:", error);\n                    return false;\n                }\n            }\n\n            // Event delegation for department edit buttons\n            document.addEventListener("click", async (e) => {\n                const editButton = e.target.closest(".edit-button");\n                if (!editButton) return;\n\n                const departmentCard = editButton.closest(".department-card");\n                if (!departmentCard) return;\n\n                const departmentId = departmentCard.dataset.departmentId;\n                const titleElement = departmentCard.querySelector(".department-title");\n                const address = titleElement.textContent.trim();\n\n                editingDepartmentId = departmentId;\n                originalAddress = address;\n\n                const inputElement = document.createElement("input");\n                inputElement.type = "text";\n                inputElement.value = address;\n                inputElement.className = "w-full px-2 py-1 text-lg font-medium text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";\n\n                const actions = document.createElement("div");\n                actions.className = "flex justify-end gap-2 mt-2";\n                actions.innerHTML = `\n                    <button class="save-btn px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">\n                        Save\n                    </button>\n                    <button class="cancel-btn px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">\n                        Cancel\n                    </button>\n                `;\n\n                titleElement.replaceWith(inputElement);\n                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);\n\n                // Handle save and cancel for department\n                actions.addEventListener("click", async (event) => {\n                    if (event.target.classList.contains("save-btn")) {\n                        const newAddress = inputElement.value.trim();\n                        if (newAddress) {\n                            const success = await updateDepartment(departmentId, newAddress);\n                            if (success) {\n                                titleElement.textContent = newAddress;\n                                inputElement.replaceWith(titleElement);\n                                actions.remove();\n                                editingDepartmentId = null;\n                            } else {\n                                alert("Failed to update department");\n                            }\n                        }\n                    } else if (event.target.classList.contains("cancel-btn")) {\n                        titleElement.textContent = originalAddress;\n                        inputElement.replaceWith(titleElement);\n                        actions.remove();\n                        editingDepartmentId = null;\n                    }\n                });\n            });\n\n            // Event delegation for message edit buttons\n            document.addEventListener("click", async (e) => {\n                const editMessageButton = e.target.closest(".edit-message-button");\n                if (!editMessageButton) return;\n\n                const messageItem = editMessageButton.closest(".message-item");\n                if (!messageItem) return;\n\n                const messageId = messageItem.dataset.messageId;\n                const messageElement = messageItem.querySelector(".message-text");\n                const messageText = messageElement.textContent.trim();\n\n                editingMessageId = messageId;\n                originalMessage = messageText;\n\n                const inputElement = document.createElement("input");\n                inputElement.type = "text";\n                inputElement.value = messageText;\n                inputElement.className = "w-full px-2 py-1 text-sm text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";\n\n                const actions = document.createElement("div");\n                actions.className = "flex justify-end gap-2 mt-2";\n                actions.innerHTML = `\n                    <button class="save-message-btn px-2 py-1 bg-indigo-600 text-white text-sm rounded-md hover:bg-indigo-700 transition-colors">\n                        Save\n                    </button>\n                    <button class="cancel-message-btn px-2 py-1 bg-gray-200 text-gray-700 text-sm rounded-md hover:bg-gray-300 transition-colors">\n                        Cancel\n                    </button>\n                `;\n\n                messageElement.replaceWith(inputElement);\n                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);\n\n                // Handle save and cancel for message\n                actions.addEventListener("click", async (event) => {\n                    if (event.target.classList.contains("save-message-btn")) {\n                        const newText = inputElement.value.trim();\n                        if (newText) {\n                            const success = await updateMessage(messageId, newText);\n                            if (success) {\n                                messageElement.textContent = newText;\n                                inputElement.replaceWith(messageElement);\n                                actions.remove();\n                                editingMessageId = null;\n                            } else {\n                                alert("Failed to update message");\n                            }\n                        }\n                    } else if (event.target.classList.contains("cancel-message-btn")) {\n                        messageElement.textContent = originalMessage;\n                        inputElement.replaceWith(messageElement);\n                        actions.remove();\n                        editingMessageId = null;\n                    }\n                });\n            });\n        });\n    <\/script> ', '<div class="min-h-screen bg-slate-50" data-astro-cid-j7pv25f6> <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16" data-astro-cid-j7pv25f6> <header class="mb-16" data-astro-cid-j7pv25f6> <h1 class="text-4xl font-light tracking-tight bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent" data-astro-cid-j7pv25f6>\nDepartments\n</h1> <p class="mt-2 text-slate-500 font-light" data-astro-cid-j7pv25f6>\nView and manage departments and their messages.\n</p> <div class="mt-6" data-astro-cid-j7pv25f6> <input type="text" id="departmentSearch" placeholder="Search departments..." class="w-full md:w-96 px-4 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent" data-astro-cid-j7pv25f6> </div> </header> <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" data-astro-cid-j7pv25f6> ', " </div> </main> </div> "], [' <script>\n        document.addEventListener("DOMContentLoaded", () => {\n            let editingDepartmentId = null;\n            let originalAddress = "";\n            let editingMessageId = null;\n            let originalMessage = "";\n\n            async function updateDepartment(departmentId, newAddress) {\n                try {\n                    const response = await fetch(\n                        \\`/api/departments/\\${departmentId}\\`,\n                        {\n                            method: "PUT",\n                            headers: { "Content-Type": "application/json" },\n                            body: JSON.stringify({ address: newAddress }),\n                        },\n                    );\n\n                    if (!response.ok) {\n                        throw new Error("Failed to update department");\n                    }\n\n                    return true;\n                } catch (error) {\n                    console.error("Error updating department:", error);\n                    return false;\n                }\n            }\n\n            async function updateMessage(messageId, newText) {\n                try {\n                    const response = await fetch(\n                        \\`/api/messages/\\${messageId}\\`,\n                        {\n                            method: "PUT",\n                            headers: { "Content-Type": "application/json" },\n                            body: JSON.stringify({ text: newText }),\n                        },\n                    );\n\n                    if (!response.ok) {\n                        throw new Error("Failed to update message");\n                    }\n\n                    return true;\n                } catch (error) {\n                    console.error("Error updating message:", error);\n                    return false;\n                }\n            }\n\n            // Event delegation for department edit buttons\n            document.addEventListener("click", async (e) => {\n                const editButton = e.target.closest(".edit-button");\n                if (!editButton) return;\n\n                const departmentCard = editButton.closest(".department-card");\n                if (!departmentCard) return;\n\n                const departmentId = departmentCard.dataset.departmentId;\n                const titleElement = departmentCard.querySelector(".department-title");\n                const address = titleElement.textContent.trim();\n\n                editingDepartmentId = departmentId;\n                originalAddress = address;\n\n                const inputElement = document.createElement("input");\n                inputElement.type = "text";\n                inputElement.value = address;\n                inputElement.className = "w-full px-2 py-1 text-lg font-medium text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";\n\n                const actions = document.createElement("div");\n                actions.className = "flex justify-end gap-2 mt-2";\n                actions.innerHTML = \\`\n                    <button class="save-btn px-3 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">\n                        Save\n                    </button>\n                    <button class="cancel-btn px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors">\n                        Cancel\n                    </button>\n                \\`;\n\n                titleElement.replaceWith(inputElement);\n                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);\n\n                // Handle save and cancel for department\n                actions.addEventListener("click", async (event) => {\n                    if (event.target.classList.contains("save-btn")) {\n                        const newAddress = inputElement.value.trim();\n                        if (newAddress) {\n                            const success = await updateDepartment(departmentId, newAddress);\n                            if (success) {\n                                titleElement.textContent = newAddress;\n                                inputElement.replaceWith(titleElement);\n                                actions.remove();\n                                editingDepartmentId = null;\n                            } else {\n                                alert("Failed to update department");\n                            }\n                        }\n                    } else if (event.target.classList.contains("cancel-btn")) {\n                        titleElement.textContent = originalAddress;\n                        inputElement.replaceWith(titleElement);\n                        actions.remove();\n                        editingDepartmentId = null;\n                    }\n                });\n            });\n\n            // Event delegation for message edit buttons\n            document.addEventListener("click", async (e) => {\n                const editMessageButton = e.target.closest(".edit-message-button");\n                if (!editMessageButton) return;\n\n                const messageItem = editMessageButton.closest(".message-item");\n                if (!messageItem) return;\n\n                const messageId = messageItem.dataset.messageId;\n                const messageElement = messageItem.querySelector(".message-text");\n                const messageText = messageElement.textContent.trim();\n\n                editingMessageId = messageId;\n                originalMessage = messageText;\n\n                const inputElement = document.createElement("input");\n                inputElement.type = "text";\n                inputElement.value = messageText;\n                inputElement.className = "w-full px-2 py-1 text-sm text-slate-800 border border-indigo-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent";\n\n                const actions = document.createElement("div");\n                actions.className = "flex justify-end gap-2 mt-2";\n                actions.innerHTML = \\`\n                    <button class="save-message-btn px-2 py-1 bg-indigo-600 text-white text-sm rounded-md hover:bg-indigo-700 transition-colors">\n                        Save\n                    </button>\n                    <button class="cancel-message-btn px-2 py-1 bg-gray-200 text-gray-700 text-sm rounded-md hover:bg-gray-300 transition-colors">\n                        Cancel\n                    </button>\n                \\`;\n\n                messageElement.replaceWith(inputElement);\n                inputElement.parentNode.insertBefore(actions, inputElement.nextSibling);\n\n                // Handle save and cancel for message\n                actions.addEventListener("click", async (event) => {\n                    if (event.target.classList.contains("save-message-btn")) {\n                        const newText = inputElement.value.trim();\n                        if (newText) {\n                            const success = await updateMessage(messageId, newText);\n                            if (success) {\n                                messageElement.textContent = newText;\n                                inputElement.replaceWith(messageElement);\n                                actions.remove();\n                                editingMessageId = null;\n                            } else {\n                                alert("Failed to update message");\n                            }\n                        }\n                    } else if (event.target.classList.contains("cancel-message-btn")) {\n                        messageElement.textContent = originalMessage;\n                        inputElement.replaceWith(messageElement);\n                        actions.remove();\n                        editingMessageId = null;\n                    }\n                });\n            });\n        });\n    <\/script> ', '<div class="min-h-screen bg-slate-50" data-astro-cid-j7pv25f6> <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16" data-astro-cid-j7pv25f6> <header class="mb-16" data-astro-cid-j7pv25f6> <h1 class="text-4xl font-light tracking-tight bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent" data-astro-cid-j7pv25f6>\nDepartments\n</h1> <p class="mt-2 text-slate-500 font-light" data-astro-cid-j7pv25f6>\nView and manage departments and their messages.\n</p> <div class="mt-6" data-astro-cid-j7pv25f6> <input type="text" id="departmentSearch" placeholder="Search departments..." class="w-full md:w-96 px-4 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent" data-astro-cid-j7pv25f6> </div> </header> <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" data-astro-cid-j7pv25f6> ', " </div> </main> </div> "])), maybeRenderHead(), departments.map((department) => renderTemplate`<div class="department-card group relative block bg-white p-8 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 border border-slate-100"${addAttribute(department._id, "data-department-id")} data-astro-cid-j7pv25f6> <div class="flex items-start justify-between" data-astro-cid-j7pv25f6> <div class="flex-grow" data-astro-cid-j7pv25f6> <h2 class="department-title text-lg font-medium text-slate-800 group-hover:text-indigo-600 transition-colors" data-astro-cid-j7pv25f6> ${department.address} </h2> </div> <button class="edit-button text-slate-400 hover:text-indigo-600 transition-colors ml-4" data-astro-cid-j7pv25f6> <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-astro-cid-j7pv25f6> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" data-astro-cid-j7pv25f6></path> </svg> </button> </div> <div class="mt-6 space-y-4" data-astro-cid-j7pv25f6> <div class="flex justify-between items-center" data-astro-cid-j7pv25f6> <h3 class="text-sm font-medium text-slate-700" data-astro-cid-j7pv25f6>Messages:</h3> <a${addAttribute(`/messages/${department._id}`, "href")} class="text-sm text-indigo-600 hover:text-indigo-800 transition-colors flex items-center gap-1" data-astro-cid-j7pv25f6>
View all
<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-astro-cid-j7pv25f6> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" data-astro-cid-j7pv25f6></path> </svg> </a> </div> ${department.messages.map((message) => renderTemplate`<div class="message-item bg-slate-50 p-3 rounded-lg"${addAttribute(message._id, "data-message-id")} data-astro-cid-j7pv25f6> <div class="flex items-start justify-between" data-astro-cid-j7pv25f6> <p class="message-text text-sm text-slate-600" data-astro-cid-j7pv25f6>${message.text}</p> <button class="edit-message-button text-slate-400 hover:text-indigo-600 transition-colors ml-2" data-astro-cid-j7pv25f6> <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" data-astro-cid-j7pv25f6> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" data-astro-cid-j7pv25f6></path> </svg> </button> </div> </div>`)} </div> </div>`)) }));
}, "/Users/pedrogonzalezsoro/Documents/gonzalezsoroweb/src/pages/index.astro", void 0);

const $$file = "/Users/pedrogonzalezsoro/Documents/gonzalezsoroweb/src/pages/index.astro";
const $$url = "";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$Index,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
